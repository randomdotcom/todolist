{"version":3,"sources":["List.js","Tools.js","ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["List","onDelete","event","value","target","parentNode","textContent","_this","props","onItemDelete","onDone","onItemDone","_this2","this","listItems","items","map","item","i","done","react_default","a","createElement","className","key","iconContext","Provider","onClick","fa","Component","Tools","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChange","setState","itemAdd","state","onItemChange","id","type","ToDoList","bind","assertThisInitialized","data","JSON","parse","localStorage","getItem","setItem","console","log","stringify","src_List_0","src_Tools_0","filter","concat","App","src_ToDoList_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.173c4727.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './List.css';\r\nimport { FaTimes, FaCheck, FaRegCheckSquare } from 'react-icons/fa';\r\nimport { IconContext } from 'react-icons';\r\n\r\n\r\nclass List extends Component {\r\n  render() {\r\n    let items = this.props.items;\r\n    const listItems = items.map((item, i) => {\r\n        if (item.done) {\r\n            return (\r\n                <li className=\"task-done\" key={i}>\r\n                    {item.value}\r\n                    <div className=\"icon-container\">\r\n                        <IconContext.Provider value={{ className: \"icon-done\" }}>\r\n                            <div className=\"icon-block\" onClick={this.onDone}>\r\n                                <FaCheck />\r\n                            </div>\r\n                        </IconContext.Provider>\r\n                        <IconContext.Provider value={{ className: \"icon-close\" }}>\r\n                            <div className=\"icon-block\" onClick={this.onDelete}>\r\n                                <FaTimes />\r\n                            </div>\r\n                        </IconContext.Provider>\r\n                    </div>\r\n                </li>\r\n            );\r\n        }\r\n        return(\r\n        <li key={i}>\r\n            {item.value}\r\n            <div className=\"icon-container\">\r\n            <IconContext.Provider value={{ className: \"icon-done\" }}>\r\n                <div className=\"icon-block\" onClick={this.onDone}>\r\n                <FaCheck />\r\n                </div>\r\n            </IconContext.Provider>\r\n            <IconContext.Provider value={{ className: \"icon-close\" }}>\r\n                <div className=\"icon-block\" onClick={this.onDelete}>\r\n                <FaTimes />\r\n                </div>\r\n            </IconContext.Provider>\r\n            </div>\r\n        </li>\r\n        );\r\n    });\r\n\r\n    return <ul>{listItems}</ul>;\r\n  }\r\n\r\n  onDelete = event => {\r\n      const value = event.target.parentNode.parentNode.parentNode.parentNode.textContent;\r\n    this.props.onItemDelete(value);\r\n  };\r\n  onDone = event => {\r\n      const value = event.target.parentNode.parentNode.parentNode.parentNode.textContent;\r\n    this.props.onItemDone(value);\r\n  };\r\n}\r\n\r\nexport default List;","import React, {Component} from 'react';\r\nimport './Tools.css';\r\n\r\nclass Tools extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: '',\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"Tools\">\r\n                <input id=\"name\" type=\"text\" onChange={this.onChange}></input>\r\n                <input type=\"submit\" value=\"ADD\" onClick={this.itemAdd}></input>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onChange = (event) => {\r\n        this.setState({ value: event.target.value })\r\n    }\r\n\r\n    itemAdd = () => {\r\n        if (this.state.value !== '') {\r\n            this.props.onItemChange(this.state.value);\r\n        }\r\n    }\r\n}\r\n\r\nexport default Tools","import React, {Component} from 'react';\r\nimport List from './List.js';\r\nimport Tools from './Tools.js';\r\nimport './ToDoList.css';\r\n\r\nclass ToDoList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { \r\n            items: [],\r\n        };\r\n\r\n        this.onItemChange=this.onItemChange.bind(this);\r\n        this.onItemDelete=this.onItemDelete.bind(this);\r\n        this.onItemDone=this.onItemDone.bind(this);\r\n    }\r\n\r\n    render() {\r\n        const data = JSON.parse(localStorage.getItem('data'));\r\n        const items = this.state.items;\r\n\r\n        if (data == null) {\r\n            localStorage.setItem('data', '[]');\r\n            console.log(\"localStorage создан\");\r\n        } else if(JSON.stringify(data) !== JSON.stringify(items)){\r\n            this.setState({items: data});\r\n            console.log(\"загрузка списка из localStorage\")\r\n        }\r\n\r\n        return(\r\n            <div className=\"ToDoList\">\r\n                <List onItemDone={this.onItemDone} onItemDelete={this.onItemDelete} items={this.state.items}/>\r\n                <Tools onItemChange={this.onItemChange}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onItemDone(value) {\r\n        let items = this.state.items;\r\n\r\n        items = items.filter((item) => {\r\n            if (item.value === value && (item.done === true || item.done === false)) {\r\n                item.done = !item.done;\r\n            } else if (item.value === value){\r\n                item.done = true;\r\n            }\r\n            return item;\r\n        });\r\n\r\n        localStorage.setItem(\"data\", JSON.stringify(items));\r\n        this.setState({ items: items });\r\n    }\r\n    onItemDelete(value) {\r\n        let items = this.state.items;\r\n\r\n        items = items.filter((item) =>  item.value !== value);\r\n\r\n        console.log(items);\r\n        localStorage.setItem(\"data\", JSON.stringify(items));\r\n        this.setState({ items: items });\r\n    }\r\n    onItemChange(value) {\r\n        let items = this.state.items;\r\n        items = items.concat({value});\r\n\r\n        localStorage.setItem(\"data\", JSON.stringify(items));\r\n        this.setState({items: items});\r\n    }\r\n}\r\n\r\nexport default ToDoList;","import React, { Component } from 'react';\nimport './App.css';\nimport ToDoList from './ToDoList.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <ToDoList/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}